apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "besu.fullname" . }}
  namespace: {{.Release.Namespace}}
spec:
  replicas: {{.Values.besu.nodeCount}}
  podManagementPolicy: Parallel
  serviceName: {{ include "besu.fullname" .}}
  selector:
    matchLabels:
      app: {{ include "besu.name" . }}
      release: {{ .Release.Name }}
      component: besu
      app.kubernetes.io/name: {{ include "besu.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "besu.name" . }}
        release: {{ .Release.Name }}
        component: besu
        app.kubernetes.io/name: {{ include "besu.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9545"
        prometheus.io/path: "/metrics"
        {{- if .Values.besu.annotations }}
        {{- toYaml .Values.besu.annotations | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "besu.serviceAccountName" . }}
      affinity:
        {{ toYaml .Values.besu.affinity | nindent 8 }}
      containers:
        - env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_ARGS
              value: "-Dvertx.disableFileCPResolving=true -Dlog4j.shutdownHookEnabled=false --add-opens java.base/sun.security.provider=ALL-UNNAMED"
          command:
            - bash
            - -xc
            - |
              bootnode={{include "besu.fullname" .}}-0
              BOOT_NODE_ARGS=()
            {{- if .Values.besu.seedNetwork }}
              if [ ! -r /data/database/CURRENT ] && [ "$POD_NAME" = "$bootnode" ]; then
                BOOT_NODE_ARGS=()
              else
                for n in $(seq 0 $(({{.Values.besu.nodeCount}} - 1))); do
                  if [ "{{include "besu.fullname" .}}-$n" = "$POD_NAME" ]; then
                    continue
                  else
                    bootnode_ip=
                    bootnode_host=
                    while [ -z "$bootnode_ip" ]; do
                      sleep 1
                      bootnode_ip=$(getent hosts {{include "besu.fullname" .}}-$n.{{.Release.Namespace}}.svc | awk '{print $1}')
                      bootnode_host={{include "besu.fullname" .}}-$n
                      bootnode_enode=$(cat /keys/{{include "besu.fullname" .}}-$n.pub| sed -e 's/^0x//')
                    done
                    echo Bootnode to use $bootnode_host
                    BOOT_NODE_ARGS+=("enode://$bootnode_enode@$bootnode_ip:{{ .Values.besu.p2p.port }}")
                  fi
                done
              fi
            {{- end }}
              {{- range .Values.besu.additionalBootnodeUrls }}
              bootnode_ip=$(getent hosts {{.host}} | awk '{print $1}' | head -1)
              while [ -z "$bootnode_ip" ]; do
                echo "Waiting to get the ip address of {{.host}}"
                sleep 1
                bootnode_ip=$(getent hosts {{.host}} | awk '{print $1}' | head -1)
              done
              BOOT_NODE_ARGS+=("enode://{{.pubkey}}@$bootnode_ip:{{.port}}")
              {{- end}}
              boot_node_string="${BOOT_NODE_ARGS[@]}"
              boot_node_string=${boot_node_string// /,}
              if [ -r /keys/${POD_NAME} ]; then
                exec /opt/besu/bin/besu \
                  --node-private-key-file=/keys/${POD_NAME} \
                  --config-file=/etc/besu/config.toml \
                  --bootnodes "$boot_node_string"
              else
                exec /opt/besu/bin/besu \
                  --config-file=/etc/besu/config.toml \
                  --bootnodes "$boot_node_string"
              fi
          image: "{{.Values.besu.image.repository}}:{{.Values.besu.image.tag}}"
          name: besu
          ports:
            - name: json-rpc
              containerPort: {{ .Values.besu.rpc.port }}
              protocol: TCP
            - name: ws
              containerPort: {{ .Values.besu.ws.port }}
              protocol: TCP
            - name: graphql
              containerPort: {{ .Values.besu.graphql.port }}
              protocol: TCP
            - name: rlpx
              containerPort: {{ .Values.besu.p2p.port }}
              protocol: TCP
            - name: discovery
              containerPort: {{ .Values.besu.p2p.port }}
              protocol: UDP
            - name: metrics
              containerPort: {{ .Values.besu.metrics.port }}
              protocol: TCP
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          livenessProbe:
            httpGet:
              path: /liveness
              port: {{ .Values.besu.rpc.port }}
            initialDelaySeconds: 60
            periodSeconds: 30
          # readinessProbe:
          #   httpGet:
          #     path: /readiness
          #     port: {{ .Values.besu.rpc.port }}
          #   initialDelaySeconds: 120
          #   periodSeconds: 30
          resources: {{ toYaml .Values.besu.resources | nindent 12 }}
          volumeMounts:
            - name: genesis
              mountPath: /etc/genesis
              readOnly: true
            - name: config-toml
              mountPath: /etc/besu
              readOnly: true
            {{- if .Values.besu.seedNetwork }}
            - mountPath: /keys
              name: networkkeys-config
              readOnly: true
            {{- end }}
            - mountPath: {{ .Values.besu.dataPath | quote }}
              name: data
            - mountPath: /enclave
              name: enclave
            {{- include "lib.volumeMounts" .Values.extraVolumeMounts | nindent 12 }}
            {{- include "lib.volumeMounts" .Values.besu.extraVolumeMounts | nindent 12 }}
      restartPolicy: Always
      volumes:
        - name: config-toml
          configMap:
            name: {{ include "besu.fullname" . }}-config-toml
        - name: genesis
          configMap:
            name: {{ include "besu.fullname" .}}-genesis
            items:
              - key: genesis.json
                path: genesis.json
        {{- if .Values.besu.seedNetwork }}
        - name: networkkeys-config
          secret:
            secretName: {{ include "besu.fullname" .}}-keys
        {{- end }}
        - name: enclave
        {{- if .Values.besu.privacy.enabled }}
          configMap:
            name: {{ include "besu.enclave.key.configmap" . }}
        {{ else }}
          emptyDir: {}
        {{- end }}
{{- if not .Values.besu.persistence.enabled }}
        - name: "data"
          emptyDir: {}
{{- else }}
        {{- include "lib.volumes" .Values.extraVolumes | nindent 8 }}
        {{- include "lib.volumes" .Values.besu.extraVolumes | nindent 8 }}
  volumeClaimTemplates:
    - metadata:
        name: "data"
        {{- if .Values.besu.persistence.annotations }}
        annotations: {{- toYaml .Values.besu.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes: {{- toYaml .Values.besu.persistence.accessModes | nindent 10 }}
        storageClassName: {{ default "gp2" .Values.besu.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.besu.persistence.size | quote }}
{{- end }}
