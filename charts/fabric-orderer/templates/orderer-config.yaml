{{ $fabricHome := "/etc/hyperledger" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "fabric-orderer.names.orderer-config" . }}
  labels: {{ include "fabric-orderer.labels" .| nindent 4}}
data:
  orderer.yaml: |-
    ---
    General:
        ListenAddress: 0.0.0.0
        ListenPort: {{ .Values.port }}
        TLS:
            Enabled: true
            PrivateKey: tls/keystore/server.key
            Certificate: tls/signcerts/cert.pem
            RootCAs:
                - tls/tlscacerts/tls-{{ include "fabric-orderer.names.ca" . }}-{{ include "fabric-orderer.names.ca" . }}.pem
            ClientAuthRequired: false
            ClientRootCAs: []
        Keepalive:
            ServerMinInterval: 60s
            ServerInterval: 7200s
            ServerTimeout: 20s
        MaxRecvMsgSize: 104857600
        MaxSendMsgSize: 104857600
        Cluster:
            SendBufferSize: 10
            ClientPrivateKey: tls/keystore/server.key
            ClientCertificate: tls/signcerts/cert.pem

            # The below 4 properties should be either set together, or be unset together.
            # If they are set, then the orderer node uses a separate listener for intra-cluster
            # communication. If they are unset, then the general orderer listener is used.
            # This is useful if you want to use a different TLS server certificates on the
            # client-facing and the intra-cluster listeners.

            # ListenPort defines the port on which the cluster listens to connections.
            ListenPort:
            # ListenAddress defines the IP on which to listen to intra-cluster communication.
            ListenAddress:

            RootCAs:
                - tls/tlscacerts/tls-{{ include "fabric-orderer.names.ca" . }}-{{ include "fabric-orderer.names.ca" . }}.pem
            # ServerCertificate defines the file location of the server TLS certificate used for intra-cluster
            # communication.
            ServerCertificate:
            # ServerPrivateKey defines the file location of the private key of the TLS certificate.
            ServerPrivateKey:

        # Bootstrap method: The method by which to obtain the bootstrap block
        # system channel is specified. The option can be one of:
        #   "file" - path to a file containing the genesis block or config block of system channel
        #   "none" - allows an orderer to start without a system channel configuration
        BootstrapMethod: none

        # Bootstrap file: The file containing the bootstrap block to use when
        # initializing the orderer system channel and BootstrapMethod is set to
        # "file".  The bootstrap file can be the genesis block, and it can also be
        # a config block for late bootstrap of some consensus methods like Raft.
        # Generate a genesis block by updating $FABRIC_CFG_PATH/configtx.yaml and
        # using configtxgen command with "-outputBlock" option.
        # Defaults to file "genesisblock" (in $FABRIC_CFG_PATH directory) if not specified.
        BootstrapFile:

        LocalMSPDir: {{ $fabricHome }}/{{ include "fabric-orderer.names.server" . }}/msp
        LocalMSPID: {{ .Values.mspId }}

        # Enable an HTTP service for Go "pprof" profiling as documented at:
        # https://golang.org/pkg/net/http/pprof
        Profile:
            Enabled: false
            Address: 0.0.0.0:6060

        # BCCSP configures the blockchain crypto service providers.
        BCCSP:
            # Default specifies the preferred blockchain crypto service provider
            # to use. If the preferred provider is not available, the software
            # based provider ("SW") will be used.
            # Valid providers are:
            #  - SW: a software based crypto provider
            #  - PKCS11: a CA hardware security module crypto provider.
            Default: SW

            # SW configures the software based blockchain crypto provider.
            SW:
                # TODO: The default Hash and Security level needs refactoring to be
                # fully configurable. Changing these defaults requires coordination
                # SHA2 is hardcoded in several places, not only BCCSP
                Hash: SHA2
                Security: 256
                # Location of key store. If this is unset, a location will be
                # chosen using: 'LocalMSPDir'/keystore
                FileKeyStore:
                    KeyStore:

            # Settings for the PKCS#11 crypto provider (i.e. when DEFAULT: PKCS11)
            PKCS11:
                # Location of the PKCS11 module library
                Library:
                # Token Label
                Label:
                # User PIN
                Pin:
                Hash:
                Security:
                FileKeyStore:
                    KeyStore:

        # Authentication contains configuration parameters related to authenticating
        # client messages
        Authentication:
            # the acceptable difference between the current server time and the
            # client's time as specified in a client request message
            TimeWindow: 15m

    FileLedger:
        Location: {{ $fabricHome }}/data/{{ include "fabric-orderer.names.server" . }}

    Debug:
        BroadcastTraceDir:
        DeliverTraceDir:

    Operations:
        ListenAddress: 0.0.0.0:{{ .Values.operations.port }}
        TLS:
            Enabled: false
            Certificate:
            PrivateKey:
            ClientAuthRequired: false
            ClientRootCAs: []

    Metrics:
        Provider: prometheus

    ################################################################################
    #
    #   Consensus Configuration
    #
    #   - This section contains config options for a consensus plugin. It is opaque
    #     to orderer, and completely up to consensus implementation to make use of.
    #
    ################################################################################
    Consensus:
        # The allowed key-value pairs here depend on consensus plugin. For etcd/raft,
        # we use following options:

        # WALDir specifies the location at which Write Ahead Logs for etcd/raft are
        # stored. Each channel will have its own subdir named after channel ID.
        WALDir: {{ $fabricHome }}/data/{{ include "fabric-orderer.names.server" . }}/etcdraft/wal

        # SnapDir specifies the location at which snapshots for etcd/raft are
        # stored. Each channel will have its own subdir named after channel ID.
        SnapDir: {{ $fabricHome }}/data/{{ include "fabric-orderer.names.server" . }}/etcdraft/snapshot
