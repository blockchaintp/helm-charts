apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "daml.fullname" .}}
  namespace: {{.Release.Namespace}}
  labels: {{ include "daml.labels" .| nindent 4}}
    component: daml
spec:
  replicas: 1
  selector:
    matchLabels: {{ include "daml.labels" .| nindent 6}}
      component: daml
  serviceName: {{ include "daml.fullname" . }}
  template:
    metadata:
      labels: {{ include "daml.labels" .| nindent 8}}
        component: daml
    spec:
      serviceAccountName: {{ include "daml.serviceAccountName" . }}
      containers:
        {{- if .Values.postgres.enabled }}
        - name: postgres
          image: "{{.Values.postgres.image.repository}}:{{.Values.postgres.image.tag}}"
          imagePullPolicy: {{.Values.postgres.image.pullPolicy }}
          ports:
          - containerPort: {{.Values.postgres.port  }}
          env:
            - name: POSTGRES_PASSWORD
            {{- if .Values.postgres.existingPasswordSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{.Values.postgres.existingPasswordSecret}}
                  key: password
            {{- else }}
              value: {{ .Values.postgres.password }}
            {{- end }}
            - name: PGDATA
              value: /data/data
          volumeMounts:
            - mountPath: /data
              name: "pgdata"
            {{- include "lib.volumeMounts" .Values.extraVolumeMounts | nindent 12 }}
        {{- end }}
        - name: daml-json-api
          image: "{{.Values.daml.jsonapi.image.repository}}:{{.Values.daml.jsonapi.image.tag}}"
          imagePullPolicy: {{.Values.daml.jsonapi.image.pullPolicy}}
          ports:
          - containerPort: {{.Values.daml.jsonapi.ports.http}}
          {{- if .Values.daml.jsonapi.args }}
          args:
            {{- range .Values.daml.jsonapi.args }}
            - {{ . | quote }}
            {{- end -}}
          {{- end }}
          env:
            - name: LEDGER_HOST
              value: localhost
            - name: LEDGER_PORT
              value: {{.Values.daml.rpc.port | quote }}
            - name: HTTP_PORT
              value: {{.Values.daml.jsonapi.ports.http | quote }}
            - name: PACKAGE_RELOAD_INTERVAL
              value: {{.Values.daml.jsonapi.packageReloadInterval | quote }}
            - name: WAIT_FOR_TIME
              value: {{.Values.daml.jsonapi.waitTimeSeconds | quote }}
            {{ if .Values.daml.jsonapi.env }}
            {{- toYaml .Values.daml.jsonapi.env | nindent 12 }}
            {{ end }}
          volumeMounts: {{- include "lib.volumeMounts" .Values.extraVolumeMounts | nindent 12 }}
          resources: {{ toYaml .Values.daml.jsonapi.resources | nindent 12 }}
        - name: daml-on-postgres
          image: "{{.Values.daml.image.repository}}:{{.Values.daml.image.tag}}"
          imagePullPolicy: {{.Values.daml.image.pullPolicy }}
          ports:
          - containerPort: {{.Values.daml.rpc.port}}
          command:
            - bash
            - -xc
          args:
            - |
              /opt/digitalasset/bin/entrypoint.sh -a 0.0.0.0 -w \
                {{- if .Values.daml.auth.enabled }}
                --auth-jwt-rs256-crt /secrets/jwt/jwt.crt \
                {{- end }}
                {{- if .Values.daml.extra_args.enabled }}
                {{ .Values.daml.extra_args.arg_str }} \
                {{- end }}
              ;
          env:
            - name: POSTGRES_USER
              value: {{ .Values.postgres.user }}
            - name: POSTGRES_PASSWORD
            {{- if .Values.postgres.existingPasswordSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{.Values.postgres.existingPasswordSecret}}
                  key: password
            {{- else }}
              value: {{ .Values.postgres.password }}
            {{- end }}
            {{- if .Values.postgres.enabled }}
            - name: POSTGRES_HOST
              value: localhost
            {{- else }}
            - name: POSTGRES_HOST
              value: {{ .Values.postgres.host }}
            {{- end }}
            - name: POSTGRES_DB
              value: {{ .Values.postgres.database }}
            - name: POSTGRES_PORT
              value: {{ .Values.postgres.port | quote }}
            - name: DAML_GRPC_PORT
              value: {{ .Values.daml.rpc.port | quote }}
            - name: LEDGER_ID
              value: {{.Values.daml.ledgerId }}
            {{ if .Values.daml.rpc.env }}
            {{- toYaml .Values.daml.rpc.env | nindent 12 }}
            {{ end }}
          volumeMounts:
            - mountPath: /secrets/jwt
              name: jwt-secret
            {{- include "lib.volumeMounts" .Values.extraVolumeMounts | nindent 12 }}
          resources: {{ toYaml .Values.daml.rpc.resources | nindent 12 }}
      restartPolicy: Always
      volumes:
        - name: jwt-secret
          secret:
            secretName: {{ .Values.deployment.name }}-cert
        {{- include "lib.volumes" .Values.extraVolumes | nindent 8 }}
{{- if not .Values.postgres.persistence.enabled }}
        - name: "pgdata"
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: "pgdata"
        {{- if .Values.postgres.persistence.annotations }}
        annotations: {{- toYaml .Values.postgres.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes: {{- toYaml .Values.postgres.persistence.accessModes | nindent 10 }}
        storageClassName: {{ .Values.postgres.persistence.storageClass }}
        resources:
          requests:
            storage: {{ .Values.postgres.persistence.size | quote }}
{{- end }}
