{{ $peering := .Values.sawtooth.dynamicPeering }}

# Convert value to an int type so that the compare works
{{ $consensus := .Values.sawtooth.consensus | int }}
---
apiVersion: apps/v1
kind: {{ if eq $consensus 100 }}StatefulSet{{ else }}DaemonSet{{ end }}
metadata:
  name: {{ .Values.sawtooth.networkName }}-validator
  namespace: {{ .Values.sawtooth.namespace }}
spec:
  {{ if eq $consensus 100}}
  replicas: 1
  serviceName: {{ .Values.sawtooth.networkName }}-validator
  {{ else }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.sawtooth.maxUnavailable }}
  minReadySeconds: {{ .Values.sawtooth.minReadySeconds }}
  {{ end }}
  selector:
    matchLabels:
      app: {{ .Values.sawtooth.networkName }}-validator
  template:
    metadata:
      labels:
        app: {{ .Values.sawtooth.networkName }}-validator
    spec:
      serviceAccountName: {{ .Values.sawtooth.networkName }}-sa
    {{ if .Values.affinity.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.sawtooth.networkName }}-validator
    {{ end }}
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      {{ if .Values.imagePullSecrets.enabled }}
      imagePullSecrets:
      {{ range .Values.imagePullSecrets.value }}
        - name: {{ .name }}
      {{ end }}
      {{ end }}
      hostAliases:
      {{ range .Values.sawtooth.externalSeeds }}
      - ip: {{.ip}}
        hostnames:
        - {{.hostname}}
      {{ end }}
      containers:
        - name: telegraf
          image: telegraf:1.10.4
          volumeMounts:
            - name: config-volume
              mountPath: /etc/telegraf
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
        {{ if eq $consensus 400 }}
        - name: pbft-engine
          image: {{ .Values.images.pbft_engine }}
          command: [ "bash", "-xc"]
          args:
          - "pbft-engine -vv -C tcp://127.0.0.1:{{ .Values.sawtooth.ports.consensus }} --storage-location disk+/var/lib/sawtooth/pbft.log"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
          volumeMounts:
            - mountPath: "/var/lib/sawtooth"
              name: sawtooth-data
        {{ else if eq $consensus 300 }}
        - name: raft-engine
          image: {{ .Values.images.raft_engine }}
          command: [ "bash", "-xc"]
          args:
          - "raft-engine -v -C tcp://127.0.0.1:{{ .Values.sawtooth.ports.consensus }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
          volumeMounts:
            - mountPath: "/etc/sawtooth"
              name: sawtooth-etc
            - mountPath: "/var/lib/sawtooth"
              name: sawtooth-data
        {{ else if eq $consensus 200 }}
        - name: poet-engine
          image: {{ .Values.images.poet_engine }}
          command: [ "bash", "-xc"]
          args:
          - "poet-engine -v --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.consensus }} --component tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }} -v"
          volumeMounts:
            - mountPath: "/etc/sawtooth"
              name: sawtooth-etc
            - mountPath: "/var/lib/sawtooth"
              name: sawtooth-data
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        - name: poet-validator-registry-tp
          image: {{ .Values.images.poet_validator_registry_tp }}
          command: [ "bash", "-xc"]
          args:
          - "poet-validator-registry-tp -v -C tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          volumeMounts:
            - mountPath: "/etc/sawtooth"
              name: sawtooth-etc
            - mountPath: "/var/lib/sawtooth"
              name: sawtooth-data
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ else }}
        - name: devmode-engine
          image: {{ .Values.images.devmode_engine }}
          command: [ "bash", "-xc"]
          args:
          - "devmode-engine-rust -v -C tcp://127.0.0.1:{{ .Values.sawtooth.ports.consensus }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ end }}
        - name: settings-tp
          image: {{ .Values.images.settings_tp }}
          command: [ "bash", "-xc"]
          args:
          - "settings-tp -v --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        - name: block-info-tp
          image: {{ .Values.images.block_info_tp }}
          command: [ "bash", "-xc"]
          args:
          - "block-info-tp -v -C tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        - name: intkey-tp
          image: {{ .Values.images.intkey_tp }}
          command: [ "bash", "-xc"]
          args:
          - "intkey-tp-go -v --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ if .Values.sawtooth.permissioned }}
        - name: identity-tp
          image: {{ .Values.images.identity_tp }}
          command: [ "bash", "-xc" ]
          args:
          - "identity-tp -v -C tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ end }}
        {{ if .Values.sawtooth.seth.enabled }}
        - name: seth-tp
          image: {{ .Values.images.seth_tp }}
          command: [ "bash", "-xc"]
          args:
          - "seth-tp -v --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        - name: seth-rpc
          image: {{ .Values.images.seth_rpc }}
          command: [ "bash", "-xc"]
          args:
          - "sleep {{ .Values.sawtooth.client_wait }} && seth-rpc -v --bind 0.0.0.0:3030 --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }} "
          ports:
            - containerPort: 3030
              name: seth-rpc
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ end }}
        {{ if .Values.sawtooth.smallbank.enabled }}
        - name: smallbank-tp
          image: {{ .Values.images.smallbank_tp }}
          command: [ "bash", "-xc"]
          args:
          - "smallbank-tp-go -v --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ end }}
        {{ if .Values.sawtooth.xo.enabled }}
        - name: xo-tp
          image: {{ .Values.images.xo_tp }}
          command: [ "bash", "-xc"]
          args:
          - "xo-tp-go -v --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ end }}
        {{ if .Values.sawtooth.daml.enabled }}
        - name: daml-tp
          image: {{ .Values.images.daml_tp }}
          command: [ "bash", "-xc"]
          args:
          - "/opt/sawtooth-daml-tp/entrypoint.sh tcp://localhost:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        - name: timekeeper
          image: {{ .Values.images.timekeeper }}
          command: [ "bash", "-xc"]
          args:
          - "/opt/timekeeper/entrypoint.sh tcp://localhost:{{ .Values.sawtooth.ports.sawcomp }}"
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        {{ end }}
        {{ range .Values.sawtooth.customTPs }}
        - name: {{ .name }}
          image: {{ .image }}
          {{ if .command }}command: [ {{ range .command }}"{{.}}",{{ end }} ]{{ end }}
          {{ if .args }}args: [ {{ range .args }}"{{.}}", {{ end }} ]{{ end }}
        {{ end }}
        - name: rest-api
          image: {{ .Values.images.rest_api }}
          command: [ "bash", "-xc"]
          args:
          - |
            sleep {{ .Values.sawtooth.client_wait }}
            sawtooth-rest-api -v --bind 0.0.0.0:{{ .Values.sawtooth.ports.rest }} \
              --connect tcp://127.0.0.1:{{ .Values.sawtooth.ports.sawcomp }} \
              --opentsdb-db {{ .Values.sawtooth.opentsdb.db }} \
              --opentsdb-url {{ if .Values.sawtooth.opentsdb.url }}{{ .Values.sawtooth.opentsdb.url }}{{ else }}http://influxdb.{{ .Values.sawtooth.namespace }}:8086{{ end }}
          ports:
            - containerPort: {{ .Values.sawtooth.ports.rest }}
              name: sawrest
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            limits:
              cpu: "250m"
            requests:
              cpu: "50m"
        - name: monitor
          image: {{ .Values.images.shell }}
          imagePullPolicy: {{ .Values.sawtooth.containers.monitor.imagePullPolicy }}
          command: [ "bash", "-xc"]
          args:
            - |
              sawtooth keygen && \
              sleep {{ .Values.sawtooth.client_wait }} && \
              /usr/local/bin/heartbeat_loop.sh http://127.0.0.1:{{ .Values.sawtooth.ports.rest }} test-$RANDOM {{ .Values.sawtooth.heartbeat.interval }}
          volumeMounts:
            - mountPath: "/etc/sawtooth"
              name: sawtooth-etc
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          resources:
            limits:
              cpu: "100m"
            requests:
              cpu: "100m"
        - name: validator
          image: {{ .Values.images.validator }}
          imagePullPolicy: {{ .Values.sawtooth.containers.validator.imagePullPolicy }}
          command: ["bash", "-xc" ]
          args:
            - |
              sleep 30
              source /usr/local/bin/validator_env.sh {{ .Values.sawtooth.namespace }} {{ .Values.sawtooth.networkName }} \
                ${POD_NAME} ${POD_IP} ${NODE_NAME}
              start_delay=$(( $DELAY * 5 ))
              sleep $start_delay
              if [ ! -r /etc/sawtooth/initialized ]; then
                if [ $RUN_GENESIS -eq 1 ]; then
            {{ if eq $consensus 400 }}
                  bash -x /usr/local/bin/pbft_genesis_config.sh {{ .Values.sawtooth.namespace }}
            {{ else if eq $consensus 300 }}
                  bash -x /usr/local/bin/raft_genesis_config.sh {{ .Values.sawtooth.namespace }}
            {{ else if eq $consensus 200 }}
                  bash -x /usr/local/bin/poet_genesis_config.sh {{ .Values.sawtooth.namespace }}
            {{ else }}
                  bash -x /usr/local/bin/devmode_genesis_config.sh {{ .Values.sawtooth.namespace }}
            {{ end }}
            {{ if .Values.sawtooth.permissioned }}
                  /usr/local/bin/identity_genesis_config.sh {{ .Values.sawtooth.namespace }}
            {{ end }}
                  sawset genesis -k /etc/sawtooth/keys/validator.priv -o /etc/sawtooth/genesis/000-genesis.batch
                  cd /etc/sawtooth/genesis
                  sawadm genesis `ls |sort`
                  cd -
                fi
                touch /etc/sawtooth/initialized;
              fi
              sawtooth-validator -v --scheduler {{ .Values.sawtooth.scheduler }} \
                --endpoint tcp://${NODE_NAME}:{{ .Values.sawtooth.ports.sawnet }} \
                --bind component:tcp://0.0.0.0:{{ .Values.sawtooth.ports.sawcomp }} \
                --bind consensus:tcp://0.0.0.0:{{ .Values.sawtooth.ports.consensus }} \
                --bind network:tcp://0.0.0.0:{{ .Values.sawtooth.ports.sawnet }} \
                --peering {{ if ($peering) }}dynamic{{ else }}static{{ end }} \
                {{ range .Values.sawtooth.externalSeeds }}{{ if ($peering) }}--seeds{{ else }}--peers{{ end }} tcp://{{ .hostname }}:{{ .port }} {{ end }} \
                {{ if ($peering) }}${SEEDS}{{ else }}${PEERS}{{ end }} \
                --maximum-peer-connectivity 255 \
                --opentsdb-db {{ .Values.sawtooth.opentsdb.db }} \
                --opentsdb-url {{ if .Values.sawtooth.opentsdb.url }}{{ .Values.sawtooth.opentsdb.url }}{{ else }}http://influxdb.{{ .Values.sawtooth.namespace }}:8086{{ end }}
          volumeMounts:
            - mountPath: "/etc/sawtooth"
              name: sawtooth-etc
            - mountPath: "/var/lib/sawtooth"
              name: sawtooth-data
          {{ if .Values.sawtooth.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                export EXIT_SIGNALS="{{ .Values.sawtooth.livenessProbe.exitSignals }}"
                export LIVENESS_PROBE_ACTIVE="{{ .Values.sawtooth.livenessProbe.active }}"
                /usr/local/bin/liveness_probe.sh
            initialDelaySeconds: {{ .Values.sawtooth.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.sawtooth.livenessProbe.periodSeconds }}
          {{ end }}
          env:
            - name: RUST_BACKTRACE
              value: "1"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{ range .Values.sawtooth.containers.validator.env }}
            - name: {{.name }}
              value: {{.value}}
            {{ end }}
          ports:
            - containerPort: {{ .Values.sawtooth.ports.sawcomp }}
              name: sawcomp
            - containerPort: {{ .Values.sawtooth.ports.sawnet }}
              hostPort: {{ .Values.sawtooth.ports.sawnet }}
              name: sawnet
            - containerPort: {{ .Values.sawtooth.ports.consensus }}
              name: consensus
      initContainers:
        - name: setup
          image: {{ .Values.images.validator }}
          volumeMounts:
            - mountPath: "/etc/sawtooth"
              name: sawtooth-etc
            - mountPath: "/var/lib/sawtooth"
              name: sawtooth-data
          command: [ "bash", "-xc" ]
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          args:
            - |
              if [ -r /etc/sawtooth/genesis.seed ]; then
                OLD_SEED=`cat /etc/sawtooth/genesis.seed`
                if [ "$OLD_SEED" != "{{ .Values.sawtooth.genesis.seed }}" ]; then
                  echo "${OLD_SEED} != ${{ .Values.sawtooth.genesis.seed }} -- resetting environment"
                  rm -rf /etc/sawtooth/*
                  rm -rf /var/lib/sawtooth/*
                  echo {{ .Values.sawtooth.genesis.seed }} > /etc/sawtooth/genesis.seed
                fi
              else
                  echo "Resetting environment and setting Genesis Seed to {{ .Values.sawtooth.genesis.seed }}"
                  rm -rf /etc/sawtooth/*
                  rm -rf /var/lib/sawtooth/*
                  echo {{ .Values.sawtooth.genesis.seed }} > /etc/sawtooth/genesis.seed
              fi
              mkdir -p /etc/sawtooth/genesis
              mkdir -p /etc/sawtooth/keys
              if [ ! -r /etc/sawtooth/keys/validator.priv ]; then
                sawadm keygen --force
              fi
        {{ if .Values.sawtooth.genesis.enabled }}
          {{ if eq $consensus 200 }}
        - name: poet-registration
          image: {{ .Values.images.poet_cli }}
          command: [ "bash", "-xc" ]
          args:
          - |
            mkdir -p /sawtooth-etc/poet
            cp /etc/sawtooth/simulator_rk_pub.pem /sawtooth-etc/;
            if [ ! -f /sawtooth-etc/poet/poet-enclave-measurement ]; then
              poet enclave measurement > /sawtooth-etc/poet/poet-enclave-measurement;
            fi
            if [ ! -f /sawtooth-etc/poet/poet-enclave-basename ]; then
              poet enclave basename > /sawtooth-etc/poet/poet-enclave-basename;
            fi
            poet registration create --enclave-module simulator \
                  -k /sawtooth-etc/keys/validator.priv \
                  -o /sawtooth-etc/genesis/200.poet.batch
          volumeMounts:
            - mountPath: "/sawtooth-etc"
              name: sawtooth-etc
            - mountPath: "/var/lib/sawtooth"
              name: sawtooth-data
          {{ end }}
        {{ end }}
      volumes:
        - name: sawtooth-etc
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.sawtooth.volumes.hostPathBaseDir }}/{{ .Values.sawtooth.namespace }}/{{ .Values.sawtooth.networkName }}/sawtooth-etc
        - name: sawtooth-data
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.sawtooth.volumes.hostPathBaseDir }}/{{ .Values.sawtooth.namespace }}/{{ .Values.sawtooth.networkName }}/sawtooth-data
        - name: config-volume
          configMap:
            name: monitoring-cm
            items:
              - key: telegraf.conf
                path: telegraf.conf
---
