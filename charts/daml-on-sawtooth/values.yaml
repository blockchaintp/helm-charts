---
## @md # Daml on Sawtooth Chart
## @md
## @md | field | description | default |
## @md |-|-|-|

global:
  image:
    tag:

imagePullSecrets:
  ## @md | `imagePullSecrets.enabled`| if true use the list of named imagePullSecrets| false |
  enabled: false
  ## @md | `imagePullSecrets.value`| a list if named secret references of the form `- name: secretName`| [] |
  value: []

## @md | `affinity`| custom affinity rules for the daml-rpc pod | {} |
affinity: {}

## @md | `args` | a string of additional arguments for the daml-rpc | nil |
args:
auth:
  ## @md | `auth.enabled` | set to true to enable DAML authentication| false |
  enabled: false

## @md | `extraVolumes` | a list of additional volumes to add to the daml-rpc | `[]` |
extraVolumes: []
## @md | `extraVolumeMounts` | a list of additional volume mounts to add to the daml-rpc | `[]` |
extraVolumeMounts: []

## @md | `port` | the port on which the daml-rpc GRPC service listens
port: 39000

image:
  ## @md | `image.pullPolicy` | the image pull policy for the daml-rpc image | IfNotPresent |
  pullPolicy: IfNotPresent
  ## @md | `image.repository` | the repository for the daml-rpc image | blockchaintp/sawtooth-daml-rpc |
  repository: blockchaintp/sawtooth-daml-rpc
  ## @md | `image.tag` | the tag for the daml-rpc image | BTP2.1.0 |
  tag: BTP2.1.0
ingress:
  ## @md | `ingress.enabled` | enable the ingress for the daml-rpc| false |
  enabled: false
  certManager: false
  ## @md | `ingress.hostname` | primary hostname for the ingress | false |
  hostname:
  ## @md | `ingress.path` | path for the ingress's primary hostname | / |
  path: /
  ## @md | `ingress.pathType` | pathType for the ingress's primary hostname | nil |
  pathType:
  ## @md | `ingress.annotations` | annotations for the ingress NOTE: since the daml-rpc uses GRPC these are normally needed | {} |
  annotations: {}
  ## @md | `ingress.tls` | true to enable tls on the ingress with a secrete at hostname-tls | false |
  tls: false
  ## @md | `ingress.extraHosts` | list of extra hosts to add to the ingress | [] |
  extraHosts: []
  ## @md | `ingress.extraPaths` | list of extra paths to add to the primary host of the ingress | [] |
  extraPaths: []
  ## @md | `ingress.extraTls` | list of extra tls entries | [] |
  extraTls: []
  ## @md | `ingress.hosts`| list of ingress host and path declarations for the jsonapi ingress| [] |
  hosts: []
  # - host: chart-example.local
  #   paths:
  #     - /

## @md | `maxOutstandingBatches` | max outstanding batches for the daml-rpc pod | 2 |
maxOutstandingBatches: 2
## @md | `maxOpsPerBatch` | maximum number of operations per batch for the daml-rpc pod | 100 |
maxOpsPerBatch: 100

## @md | `participantId`| use this participant id otherwise one choose based on network| nil |
participantId:

## @md | `startupDelay` | seconds to delay start up the daml-rpc | 90 |
startupDelay: 90

serviceAccount:
  ## @md | `serviceAccount.create` | true to create a service account | false |
  create: true
  ## @md | `serviceAccount.name` | name of the service account | nil (defaults to based on release name) |
  name:

jsonapi:
  args: []
  ## @md | `jsonapi.authToken` | the auth token to use for the jsonapi server (required if auth.enabled) | nil |
  authToken:
  port: 8080
  packageReloadInterval:
  waitTimeSeconds: 30
  image:
    ## @md | `jsonapi.image.repository` | the repository of the image| blockchaintp/daml-json-api |
    repository: blockchaintp/daml-json-api
    ## @md | `jsonapi.image.tag`| the tag of the image to use| latest |
    tag: BTP2.1.0
    ## @md | `jsonapi.image.pullPolicy` | the image pull policy to use| IfNotPresent |
    pullPolicy: IfNotPresent
  ingress:
    ## @md | `jsonapi.ingress.apiVersion` | if necessary the apiVersion of the ingress may be overridden | "" |
    apiVersion: ""
    ## @md | `jsonapi.ingress.enabled` | true to enable the ingress to the main service rest-api | false |
    enabled: false
    ## @md | `jsonapi.ingress.certManager` | true to enable the acme certmanager for this ingress | false |
    certManager: false
    ## @md | `jsonapi.ingress.hostname` | primary hostname for the ingress | false |
    hostname:
    ## @md | `jsonapi.ingress.path` | path for the ingress's primary hostname | / |
    path: /
    ## @md | `jsonapi.ingress.pathType` | pathType for the ingress's primary hostname | nil |
    pathType:
    ## @md | `jsonapi.ingress.annotations` | annotations for the ingress | {} |
    annotations: {}
    ## @md | `jsonapi.ingress.tls` | true to enable tls on the ingress with a secrete at hostname-tls | false |
    tls: false
    ## @md | `jsonapi.ingress.extraHosts` | list of extra hosts to add to the ingress | [] |
    extraHosts: []
    ## @md | `jsonapi.ingress.extraPaths` | list of extra paths to add to the primary host of the ingress | [] |
    extraPaths: []
    ## @md | `jsonapi.ingress.extraTls` | list of extra tls entries | [] |
    extraTls: []
    ## @md | `jsonapi.ingress.hosts`| list of ingress host and path declarations for the jsonapi ingress| [] |
    hosts: []
    # - host: chart-example.local
    #   paths:
    #     - /

k8s:
  image:
    ## @md | `k8s.image.repository`| the image name| alpine/k8s |
    repository: alpine/k8s
    ## @md | `k8s.image.tag`| the image tag to use| 1.18.2 |
    tag: 1.18.2
    ## @md | `k8s.image.pullPolicy`| the image pull policy to use| IfNotPresent |
    pullPolicy: IfNotPresent

openssl:
  image:
    ## @md | `openssl.image.repository`| the image name| alpine/openssl |
    repository: alpine/openssl
    ## @md | `openssl.image.tag`| the image tag to use| latest |
    tag: latest
    ## @md | `openssl.image.pullPolicy`| the image pull policy to use| IfNotPresent |
    pullPolicy: IfNotPresent

## @md | `postgres`| postgres settings| N/A |
postgres:
  ## @md | `postgres.image`| postgres image settings| N/A |
  image:
    ## @md | `postgres.image.repository`| postgres image repository| "postgres" |
    repository: postgres
    ## @md | `postgres.image.tag`| postgres image tag| "11" |
    tag: "11"
  ## @md | `postgres.persistence`| postgres persistence settings| N/A |
  persistence:
    ## @md | `postgres.persistence.enabled`| if true allocate a PVC for the postgres instance| false |
    enabled: false
    ## @md | `postgres.persistence.annotations`| any custom annotations for the postgres PVC's| {} |
    annotations: {}
    ## @md | `postgres.persistence.accessModes`| access modes the postgres PVC's| ["ReadWriteOnce"] |
    accessModes:
      - "ReadWriteOnce"
    ## @md | `postgres.persistence.storageClass`| storage class for the postgres PVC's| "gp2" |
    storageClass:
    ## @md | `postgres.persistence.size`| storage class for the postgres PVC's| "40Gi" |
    size: "40Gi"
  resources:

## @md | `sawtooth` | sawtooth options may be configured | see [Sawtooth](../sawtooth/README.md) |
sawtooth:
  sawtooth:
    statefulset:
      enabled: true
    consensus: 400

tp:
  ## @md | `tp.args` | a string of arguments to pass to the tp container| nil |
  args:
  image:
    ## @md | `tp.image.pullPolicy` | the image pull policy | IfNotPresent |
    pullPolicy: IfNotPresent
    ## @md | `tp.image.repository` | the image repository | blockchaintp/sawtooth-daml-tp |
    repository: blockchaintp/sawtooth-daml-tp
    ## @md | `tp.image.tag` | the image tag | BTP2.1.0 |
    tag: BTP2.1.0
  ## @md | `tp.extraVolumes` | extra volumes declarations for the daml-rpc deployment | list | nil
  extraVolumes:
  ## @md | `tp.extraVolumeMounts` | extra volume mounts for daml-rpc deployment | list | nil
  extraVolumeMounts:
  resources:

trigger:
  args:
  ## @md | `trigger.extraVolumeMounts` | extra volume mounts for trigger service | list | nil
  extraVolumeMounts: []
  ## @md | `trigger.extraVolumes` | extra volumes declarations for trigger service | list | nil
  extraVolumes: []
  image:
    ## @md | `trigger.image.pullPolicy` | the image pull policy | IfNotPresent |
    pullPolicy: IfNotPresent
    ## @md | `trigger.image.repository`| the image name| blockchaintp/sawtooth-daml-trigger |
    repository: blockchaintp/daml-trigger
    ## @md | `trigger.image.tag`| the image tag to use| BTP2.1.0 |
    tag: BTP2.1.0
  ## @md | `trigger.triggerDefs`| settings for the individual trigger deployments which replaces the trigger-service See [Triggers](#triggers)| [] |
  triggerDefs: []

timekeeper:
  ## @md | `timekeeper.args` | a string of additional arguments for the timekeeper | nil |
  args:
  image:
    ## @md | `timekeeper.image.repository` | the repository of the timekeeper image | blockchaintp/timekeeper |
    repository: blockchaintp/timekeeper
    ## @md | `timekeeper.image.tag` | the tag of the timekeeper image | BTP2.1.0 |
    tag: BTP2.1.0
    ## @md | `timekeeper.image.pullPolicy` | the image pull policy for the timekeeper image | IfNotPresent |
    pullPolicy: IfNotPresent
  resources:


## @md
## @md ## Triggers
## @md
## @md Triggers are described using maps of the following parameters
## @md
## @md | field | description| required| default |
## @md |- |-|-|- |
## @md | `name` | kubernetes name of the trigger container| yes| (system-determined) |
## @md | `triggerName` | daml name of the trigger to be run| yes| nil |
## @md | `darFile` | path of the dar file to use| yes| nil |
## @md | `party` | name of the party to use| yes| nil |
## @md | `env` | environment var for the trigger| no| [] |
## @md | `resources` | resources for the trigger| no| [] |
