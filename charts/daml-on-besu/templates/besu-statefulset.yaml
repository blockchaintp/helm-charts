apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "besu.fullname" . }}
  namespace: {{.Release.Namespace}}
  labels:

spec:
  replicas: {{.Values.besu.nodeCount}}
  podManagementPolicy: OrderedReady
  serviceName: {{ include "besu.fullname" .}}
  selector:
    matchLabels:
      app: {{ include "besu.name" . }}
      release: {{ .Release.Name }}
      component: besu-node
      app.kubernetes.io/name: {{ include "besu.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "besu.name" . }}
        release: {{ .Release.Name }}
        component: besu-node
        app.kubernetes.io/name: {{ include "besu.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9545"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ include "besu.serviceAccountName" . }}
      containers:
        - env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: JAVA_ARGS
              value: "-Dvertx.disableFileCPResolving=true -Dlog4j.shutdownHookEnabled=false --add-opens java.base/sun.security.provider=ALL-UNNAMED"
          command:
            - bash
            - -xc
            - |
              {{- if .Values.besu.seedNetwork }}
              bootnode={{include "besu.fullname" .}}-0
              if [ ! -r /data/database/CURRENT ] && [ "$POD_NAME" = "$bootnode" ]; then
                BOOT_NODE_ARGS=()
              else
                bootnode_ip=$(getent hosts {{include "besu.fullname" .}} | awk '{print $1}' | head -1)
                bootnode_host=$(getent hosts $bootnode_ip |
                  awk '{print $NF}' | awk -F. '{print $1}')
                if [ "$bootnode_host" = "$POD_NAME" ]; then
                  bootnode_ip=
                  bootnode_host=
                elif echo $bootnode_host | grep -q {{include "besu.fullname" .}}; then
                  echo Bootnode to use $bootnode_host
                else
                  bootnode_ip=
                  bootnode_host=
                fi
                while [ -z "$bootnode_ip" ]; do
                  sleep 1;
                  bootnode_ip=$(getent hosts {{include "besu.fullname" .}} | awk '{print $1}' | head -1)
                  bootnode_host=$(getent hosts $bootnode_ip |
                    awk '{print $NF}' | awk -F. '{print $1}')
                  if [ "$bootnode_host" = "$POD_NAME" ]; then
                    bootnode_ip=
                    bootnode_host=
                  elif echo $bootnode_host | grep -q {{include "besu.fullname" .}}; then
                    echo Bootnode to use $bootnode_host
                  else
                    bootnode_ip=
                    bootnode_host=
                  fi
                done
                bootnode_enode=$(cat /keys/{{include "besu.fullname" .}}-0.pub| sed -e 's/^0x//')
                BOOT_NODE_ARGS=("enode://$bootnode_enode@$bootnode_ip:{{.Values.besu.p2p.port}}")
              fi
              {{- end }}
              {{- range .Values.besu.additionalBootnodeUrls }}
              bootnode_ip=$(getent hosts {{.host}} | awk '{print $1}' | head -1)
              while [ -z "$bootnode_ip" ]; do
                sleep 1
                bootnode_ip=$(getent hosts {{.host}} | awk '{print $1}' | head -1)
              done
              BOOT_NODE_ARGS+=("enode://{{.pubkey}}@$bootnode_ip:{{.port}}")
              {{- end}}
              boot_node_string="${BOOT_NODE_ARGS[@]}"
              boot_node_string=${boot_node_string// /,}
              if [ -r /keys/${POD_NAME} ]; then
                {{- if .Values.daml.privacy.enabled }}
                exec /opt/daml-on-besu/besu-private/entrypoint.sh \
                {{- else }}
                exec /opt/daml-on-besu/besu/entrypoint.sh \
                {{- end }}
                  --node-private-key-file=/keys/${POD_NAME} \
                  --config-file=/etc/besu/config.toml \
                  --bootnodes "$boot_node_string"
              else
                {{- if .Values.daml.privacy.enabled }}
                exec /opt/daml-on-besu/besu-private/entrypoint.sh \
                {{- else }}
                exec /opt/daml-on-besu/besu/entrypoint.sh \
                {{- end }}
                  --config-file=/etc/besu/config.toml \
                  --bootnodes "$boot_node_string"
              fi
          {{- if .Values.daml.privacy.enabled }}
          image: "{{.Values.besu.privateImage.repository}}:{{.Values.besu.privateImage.tag}}"
          {{- else }}
          image: "{{.Values.besu.image.repository}}:{{.Values.besu.image.tag}}"
          {{- end }}
          name: besu
          ports:
            - name: json-rpc
              containerPort: {{ .Values.besu.rpc.port }}
              protocol: TCP
            - name: ws
              containerPort: {{ .Values.besu.ws.port }}
              protocol: TCP
            - name: graphql
              containerPort: {{ .Values.besu.graphql.port }}
              protocol: TCP
            - name: rlpx
              containerPort: {{ .Values.besu.p2p.port }}
              protocol: TCP
            - name: discovery
              containerPort: {{ .Values.besu.p2p.port }}
              protocol: UDP
            - name: metrics
              containerPort: {{ .Values.besu.metrics.port }}
              protocol: TCP
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources: {}
          volumeMounts:
            - name: genesis
              mountPath: /etc/genesis
              readOnly: true
            - name: config-toml
              mountPath: /etc/besu
              readOnly: true
            {{- if .Values.besu.seedNetwork }}
            - mountPath: /keys
              name: networkkeys-config
              readOnly: true
            {{- end }}
            - mountPath: {{ .Values.besu.dataPath | quote }}
              name: data
            - mountPath: /dev/random
              name: dev-random
            - mountPath: /dev/urandom
              name: dev-urandom
      restartPolicy: Always
      volumes:
        - name: config-toml
          configMap:
            name: {{ include "besu.fullname" . }}-config-toml
        - name: dev-random
          hostPath:
            path: /dev/random
            type: CharDevice
        - name: dev-urandom
          hostPath:
            path: /dev/urandom
            type: CharDevice
        - name: genesis
          configMap:
            name: {{ include "besu.fullname" .}}-genesis
            items:
              - key: genesis.json
                path: genesis.json
        {{- if .Values.besu.seedNetwork }}
        - name: networkkeys-config
          secret:
            secretName: {{ include "besu.fullname" .}}-keys
        {{- end }}
{{- if not .Values.besu.persistence.enabled }}
        - name: "data"
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: "data"
        {{- if .Values.besu.persistence.annotations }}
        annotations: {{- toYaml .Values.besu.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes: {{- toYaml .Values.besu.persistence.accessModes | nindent 10 }}
        storageClassName: {{ default "gp2" .Values.besu.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.besu.persistence.size | quote }}
{{- end }}
