apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "daml.fullname" .}}-rpc
  namespace: {{.Release.Namespace}}
  labels:
{{ include "daml.labels" .| indent 4}}
spec:
  replicas: {{.Values.daml.rpcCount}}
  selector:
    matchLabels:
{{ include "daml.labels" .| indent 6}}
  serviceName: {{ include "daml.fullname" . }}-rpc
  template:
    metadata:
      labels:
{{ include "daml.labels" .| indent 8}}
      {{- if .Values.daml.annotations }}
      annotations:
        {{- toYaml .Values.daml.annotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "besu.serviceAccountName" . }}
      containers:
        - name: postgres
          image: "{{.Values.postgres.image.repository}}:{{.Values.postgres.image.tag}}"
          imagePullPolicy: {{.Values.postgres.image.pullPolicy }}
          ports:
          - containerPort: 5432
          env:
          - name: POSTGRES_HOST_AUTH_METHOD
            value: trust
          - name: PGDATA
            value: /data/{{.Values.daml.rpc.participantId}}
          volumeMounts:
            - mountPath: /data
              name: "pgdata"
          resources: {{ toYaml .Values.postgres.resources | nindent 12 }}
        {{- if .Values.daml.jsonapi.enabled }}
        - name: daml-json-api
          image: "{{.Values.daml.jsonapi.image.repository}}:{{.Values.daml.jsonapi.image.tag}}"
          imagePullPolicy: {{.Values.daml.jsonapi.image.imagePullPolicy}}
          ports:
          - containerPort: {{.Values.daml.jsonapi.ports.http}}
          {{- if .Values.daml.jsonapi.args }}
          args:
            {{- range .Values.daml.jsonapi.args }}
            - {{ . | quote }}
            {{- end -}}
          {{- end }}
          env:
            - name: LEDGER_HOST
              value: localhost
            - name: LEDGER_PORT
              value: {{.Values.daml.rpc.port | quote }}
            - name: HTTP_PORT
              value: {{.Values.daml.jsonapi.port | quote }}
            - name: PACKAGE_RELOAD_INTERVAL
              value: {{.Values.daml.jsonapi.packageReloadInterval | quote }}
            - name: WAIT_FOR_TIME
              value: {{.Values.daml.jsonapi.waitTimeSeconds | quote }}
            {{ if .Values.daml.jsonapi.env }}
            {{- toYaml .Values.daml.jsonapi.env | nindent 12 }}
            {{ end }}
          volumeMounts:
            {{- toYaml $.Values.daml.extraVolumeMounts | nindent 12 }}
          resources: {{ toYaml .Values.daml.jsonapi.resources | nindent 12 }}
        {{- end }}
        - name: daml-on-besu
          {{- if .Values.daml.privacy.enabled }}
          image: "{{.Values.daml.privateImage.repository}}:{{.Values.daml.image.tag}}"
          {{- else }}
          image: "{{.Values.daml.image.repository}}:{{.Values.daml.image.tag}}"
          {{- end }}
          imagePullPolicy: {{.Values.daml.image.pullPolicy }}
          ports:
            - containerPort: {{.Values.daml.rpc.port}}
          command:
            - bash
            - -xc
          args:
            - |
              sleep 120
              {{- if .Values.daml.privacy.enabled }}
              /opt/daml-on-besu/private-rpc/entrypoint.sh \
              {{- else }}
              /opt/daml-on-besu/rpc/entrypoint.sh \
              {{- end }}
                --json-rpc-url http://{{include "besu.fullname" .}}:{{.Values.besu.rpc.port}} \
                --participant port={{.Values.daml.rpc.port}},address=0.0.0.0,participant-id={{.Values.daml.rpc.participantId}},server-jdbc-url=jdbc:postgresql://localhost/postgres?user=postgres \
                --private-key-file /keys/{{ include "besu.fullname" .}}-rpc-0 \
                --ledger-id {{.Values.daml.ledgerId }} \
                {{- if .Values.daml.auth.enabled }}
                --auth-jwt-rs256-crt /secrets/jwt/jwt.crt \
                {{- end }}
                {{- if .Values.daml.rpc.extra_args.enabled }}
                {{ .Values.daml.rpc.extra_args.arg_str }} \
                {{- end }}
              ;
          resources: {}
          volumeMounts:
            - mountPath: /keys
              name: networkkeys-config
              readOnly: true
            - mountPath: /dev/random
              name: dev-random
            - mountPath: /dev/urandom
              name: dev-urandom
            - mountPath: /secrets/jwt
              name: jwt-secret
          resources: {{ toYaml .Values.daml.rpc.resources | nindent 12 }}
      restartPolicy: Always
      volumes:
        - name: networkkeys-config
          secret:
            secretName: {{include "daml.fullname" .}}-rpc-keys
        - name: dev-random
          hostPath:
            path: /dev/random
            type: CharDevice
        - name: dev-urandom
          hostPath:
            path: /dev/urandom
            type: CharDevice
        - name: jwt-secret
          secret:
            secretName: {{ .Values.deployment.name }}-cert
        {{- if .Values.daml.extraVolumes }}
        {{- toYaml .Values.daml.extraVolumes | nindent 8 }}
        {{- end }}
{{- if not .Values.postgres.persistence.enabled }}
        - name: "pgdata"
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: "pgdata"
        {{- if .Values.postgres.persistence.annotations }}
        annotations: {{- toYaml .Values.postgres.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes: {{- toYaml .Values.postgres.persistence.accessModes | nindent 10 }}
        storageClassName: {{ default "gp2" .Values.postgres.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.postgres.persistence.size | quote }}
{{- end }}
